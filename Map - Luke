#include <iostream>
// #include <windows.h> Windows API - Disabled when working on Linux
using namespace std;

const int height = 15, width = 30;
int x = 0, y = 0; // Player Coordinates

//Setting colour values for Linux/Codio
const std::string red("\033[0;31m");
const std::string green("\033[1;32m");
const std::string yellow("\033[1;33m");
const std::string cyan("\033[0;36m");
const std::string magenta("\033[0;35m");
const std::string reset("\033[0m");


// Grid/Map
char myMap[height][width] = {
    {'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.' },
    {'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.' },
    {'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.' },
    {'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.' },
    {'.', '.', '.', '.', '.', '.', '~', '~', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.' },
    {'~', '~', '~', '~', '~', '~', '~', '~', '~', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.' },
    {'.', '.', '~', '.', '~', '~', '~', '~', '~', '~', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.' },
    {'.', '.', '.', '.', '.', '~', '~', '~', '~', '~', '~', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.' },
    {'.', '.', '.', '.', '.', '.', '~', '~', '~', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.' },
    {'.', '.', '.', '.', '.', '.', '.', '~', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.' },
    {'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.' },
    {'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.' },
    {'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.' },
    {'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.' },
    {'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.' }
};

// Applying Colours to Map and Print
void PrintMap() {
    cout << "(" << x << ','<< y << ")" << endl;
    for (int i = 0; i < height; i++) {
        for (int j = 0; j < width; j++) {
            if (myMap[i][j] == '.') {
                cout << green << myMap[i][j];
            }
            else if (myMap[i][j] == '~'){
                cout << cyan << myMap[i][j];
            }
            else if (myMap[i][j] == '@') {
                cout << red << myMap[i][j];
            }
            else{
                cout << reset << myMap[i][j];
            }
        }
        cout << endl;
    }
}

// User Movement
int main() {
    char input; // User movement input
    char temp_tile = myMap[y][x]; // '.' (0, 0);
    myMap[y][x] = '@'; // '@' (0, 0);
    PrintMap(); 
    
// Looping map generation  
while (true) {
    cin >> input;

    if (input == 's' && y < height - 1) {
        myMap[y][x] = temp_tile;
        y++;
        temp_tile = myMap[y][x];
        myMap[y][x] = '@';
        PrintMap();
    }
    if (input == 'd' && x < width - 1) {
        myMap[y][x] = temp_tile;
        x++;
        temp_tile = myMap[y][x];
        myMap[y][x] = '@';
        PrintMap();
    }
    if (input == 'w' && y > 0){
        myMap[y][x] = temp_tile;
        y--;
        temp_tile = myMap[y][x];
        myMap[y][x] = '@';
        PrintMap();
    }

    if (input == 'a' && x > 0) {
        myMap[y][x] = temp_tile;
        x--;
        temp_tile = myMap[y][x];
        myMap[y][x] = '@';
        PrintMap();
    }
}
    system("PAUSE");
    return 0;
}

// Luke Kilmartin - AxleCat
